import pygame
from paddle import Paddle
from ball import Ball
from brick import Brick
from mc import Agent
from board import Board
import pygame_menu
import time

# Initializing the game.
pygame.init()

# Variable to clear the board. 
WHITE = (255, 255, 255)

# For debugging
DEBUG = False


# Function defination to construct the bricks
def create_bricks(shape: str, brick_size: tuple[int, int] = (3, 1)):
    bricks = []

    if shape == 'rectangle':
        shape: list[list[int]] = [

        [1,1 ,1, 1, 1],
        # [1,1 ,1, 1, 1],

        # [1, 1, 1, 1, 1],
        # [1, 1, 1, 1, 1],
    ]
    elif shape == 'triangle':
        shape: list[list[int]] = [
        [0, 0, 1, 0, 0,],
        [0, 0, 1, 0, 0],
        [0, 1, 0, 1, 0],
        [1, 0, 0, 0, 1],
    ]
    elif shape == 'hollow_triangle':
        shape: list[list[int]] = [
        [1, 0, 1, 0, 1],
        [0, 1, 0, 1, 0],
        [0, 0, 0, 0, 0],
    ]
    for r_index, row in enumerate(shape):
        for c_index, set_brick in enumerate(row):
            if set_brick:
                x = c_index * brick_size[0]
                y = r_index * brick_size[1]
                brick = Brick(x, y, *brick_size)
                bricks.append(brick)
    return pygame.sprite.Group(bricks)

# Game logic
def run_game(shape):

    bounces_total: int = 0

    # Variables for time tracking
    start_time = time.time()
    last_time = start_time

    # Initializing values
    won = False
    shape=shape
    lost_count=0
    # Loop while the game is not won
    while not won:

        # List with all sprite objects
        all_sprites_list: pygame.sprite.Group = pygame.sprite.Group()

        # Code for putting in the paddle
        paddle = Paddle(5, 1, *board.size)
        ball = Ball(0, 0, 1, 1, None, *board.size)

        
        agent.reset_graph()
        agent.remember_bounce((ball.rect.x, ball.rect.y), False)
        agent.speed_change(ball.speed)

        # Recreate the layout by rebuilding the bricks
        bricks = create_bricks(shape)

        all_sprites_list.add(paddle)
        all_sprites_list.add(ball)
        all_sprites_list.add(bricks)

        # We want to play
        play = True

        # Define a clock
        clock = pygame.time.Clock()
        fps = 6000
        agent_wait_time = 1
        iteration = 0
        paddle_bumps: int = 0
        current_time = time.time()
        _n_bricks: int = len(bricks)

        # Loop to keep playing
        while play:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    play = False
                    won = True

            if not iteration % agent_wait_time:

                # Agent:
                # state = (
                #     paddle.rect.x,  # Paddle position
                #     paddle.speed,  # Paddle speed
                #     (ball.rect.x, ball.rect.y),  # Ball position
                #     tuple(ball.speed),  # Ball speed
                # )

                state = (
                    ball.get_x_center() - paddle.get_x_center() ,
                    paddle.speed,
                    ball.speed,
                )

                action = agent.policy(state)
                paddle.speed += action
                paddle.update_speed()

            # --- Drawing code should go here
            # First, clear the screen be white
            board.surface.fill(WHITE)

            # Recognizes break successfully
            tobreak = False
            tobreak = ball.check_over(board.size[1], bricks)

            if len(bricks) == 0:
                agent.remember_bounce((ball.rect.x, ball.rect.y), paddle_bounce)
                won=True
                play=False
                end_time = time.time()
                exec_time=end_time - start_time
                print('Execution time:', exec_time, 'seconds')
                canvas = pygame.surface.Surface(board.render_size)
                agent.render_bounces(
                    canvas, board.render_size[0] // board.surface.get_width()
                )
                break
            if tobreak:
                agent.remember_bounce((ball.rect.x, ball.rect.y), paddle_bounce)
                elapsed_time = int(current_time - start_time)
                print(f"The game took {elapsed_time} seconds to complete!")
                play = False
                lost_count+=1
                
                if not len(bricks):
                    canvas = pygame.surface.Surface(board.render_size)
                    agent.render_bounces(
                        canvas, board.render_size[0] // board.surface.get_width()
                    )
                break
                # Restarts the program after time delay

            # Calculate current time
            current_time = time.time()

            # Check if 10 seconds have passed since the last time print
            if current_time - last_time >= 10:
                print(f"The length of the bricks list is {len(bricks)}")
                elapsed_time = int(current_time - start_time)
                print("Elapsed time: ", elapsed_time, " seconds")
                last_time = current_time

             # Move paddle
        # Moving the paddle when the user uses the arrow keys

            # if DEBUG:
                # print(ball.speed)

            # Return only bricks
            # bricks = all_sprites_list.sprites()[2:]
            if ball.paddle_collision(paddle):
                paddle_bumps += 1
                bounces_total += 1
                paddle_bounce = True
            else:
                paddle_bounce = False

            ball.reflect(bricks)
            
            
            if agent.speed_change(ball.speed) or len(bricks) != _n_bricks:
                agent.remember_bounce((ball.rect.x, ball.rect.y), paddle_bounce)
            _n_bricks = len(bricks)
            ball.move()
            paddle.move_x(paddle.speed)
            if paddle.collision_x():
                paddle.speed = 0

            # if ball.check_gameover():
            #    play = False
            #    break

            all_sprites_list.update()

            # Now let's draw all the sprites in one go. (For now we only have 2 sprites!)
            all_sprites_list.draw(board.surface)

            if not iteration % agent_wait_time:
                # Agent rewards
                reward = agent.get_score(bricks, paddle_bumps,lost_count, ball.get_x_center() - paddle.get_x_center(), paddle.rect.width)
                paddle_bumps = 0
                agent.remember_reward(state, action, reward)
                print(
                    f"""
                    Agent:
                    state:        {state}
                    action:       {action}
                    reward:       {reward}
                    total_reward: {agent.total_reward}
                    bricks:       {len(bricks)}
                    games_lost:    {lost_count}
                    """
                )
            

            # --- Go ahead and update the screen with what we've drawn.
            board.render()
            board.display.flip()

            # --- Limit to 60 frames per second
            iteration += 1
            # clock.tick(1)           



# Define layout selection functions
def layout1_function():
    shape='rectangle'
    print("Layout 1 selected: rectangle")
    run_game(shape)

def layout2_function():
    shape='triangle'
    print("Layout 2 selected: triangle")
    run_game(shape)


def layout3_function():
    shape='hollow_triangle'
    print("Layout 3 selected: hollow_triangle")
    run_game(shape)


board: Board = Board()
board.display.set_caption("Atari Breakout Game")
agent = Agent()

menu = pygame_menu.Menu("Select Game Layout!!", 400, 300, theme=pygame_menu.themes.THEME_BLUE)



# Add layout options and call the relevant function for layout construction
menu.add.button("Rectangle Bar", layout1_function)
menu.add.button("Hollow Pyramid", layout2_function)
menu.add.button("Cris Cross", layout3_function)
menu.add.button("Exit", pygame_menu.events.EXIT)


running = True
while running:
    # Process events
    events = pygame.event.get()
    for event in events:
        if event.type == pygame.QUIT:
            running = False

    # Update menu
    menu.mainloop(board.screen, disable_loop=True)

    board.display.flip()

pygame.quit()
